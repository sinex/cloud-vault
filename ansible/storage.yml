- name: "Storage: Create LUKS container"
  tags:
    - storage
  community.crypto.luks_device:
    device: "{{ block_volume_device }}"
    state: opened
    name: block_volume
    passphrase: "{{ block_volume_luks_password }}"


- name: "Storage: Partition Block Volume"
  tags:
    - storage
  vars:
    - size: "{{ 100 / (block_volume_mounts | length) }}"
  community.general.parted:
    device: /dev/mapper/block_volume
    number: "{{ ansible_loop.index }}"
    label: gpt
    part_start: "{{ (ansible_loop.index0 * (size | float)) | round | int }}%"
    part_end: "{{ (ansible_loop.index0 * (size | float) + (size | float)) | round | int }}%"
    unit: "%"
    state: present
  when: block_volume_device | regex_replace("^/dev/") in hostvars[inventory_hostname].ansible_devices
  loop: "{{ block_volume_mounts }}"
  loop_control:
    extended: true
  register: block_volume


- name: "Storage: Format Block Volume partitions"
  tags:
    - storage
  community.general.filesystem:
    dev: "{{ (block_volume.results | last).disk.dev }}{{ item.num }}"
    fstype: "{{ block_volume_filesystem }}"
    force: false
  loop: "{{ (block_volume.results | last).partitions }}"


- name: "Storage: Create block volume mount points"
  tags:
    - storage
  file:
    path: "{{ item.target }}"
    state: directory
    mode: "{{ item.mode }}"
  loop: "{{ block_volume_mounts }}"


- name: "Storage: Mount Block Volume partitions"
  tags:
    - storage
  ansible.posix.mount:
    src: "{{ (block_volume.results | last).disk.dev }}{{ item.num }}"
    path: "{{ block_volume_mounts[item.num | int - 1].target }}"
    fstype: "{{ block_volume_filesystem }}"
    state: absent
  loop: "{{ (block_volume.results | last).partitions }}"
